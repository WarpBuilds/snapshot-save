/* tslint:disable */
/* eslint-disable */
/**
 * Warp Builds API Docs
 * This is the docs for warp builds api for argonaut
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  CommonsListRunnerImageVersionsOutput,
  CommonsRunnerImageVersion,
  CommonsUpdateRunnerImageVersionInput,
  TypesGenericSuccessMessage,
  WarpBuildAPIError
} from '../models/index'
import {
  CommonsListRunnerImageVersionsOutputFromJSON,
  CommonsListRunnerImageVersionsOutputToJSON,
  CommonsRunnerImageVersionFromJSON,
  CommonsRunnerImageVersionToJSON,
  CommonsUpdateRunnerImageVersionInputFromJSON,
  CommonsUpdateRunnerImageVersionInputToJSON,
  TypesGenericSuccessMessageFromJSON,
  TypesGenericSuccessMessageToJSON,
  WarpBuildAPIErrorFromJSON,
  WarpBuildAPIErrorToJSON
} from '../models/index'

export interface DeleteRunnerImageVersionRequest {
  id: string
}

export interface GetRunnerImageVersionRequest {
  id: string
}

export interface ListRunnerImageVersionsRequest {
  runner_image_id: string
}

export interface UpdateRunnerImageVersionRequest {
  id: string
  body: CommonsUpdateRunnerImageVersionInput
}

/**
 *
 */
export class V1RunnerImageVersionsApi extends runtime.BaseAPI {
  /**
   * Delete runner image version details for the id.
   */
  async deleteRunnerImageVersionRaw(
    requestParameters: DeleteRunnerImageVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TypesGenericSuccessMessage>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling deleteRunnerImageVersion().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/runner-image-versions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      TypesGenericSuccessMessageFromJSON(jsonValue)
    )
  }

  /**
   * Delete runner image version details for the id.
   */
  async deleteRunnerImageVersion(
    requestParameters: DeleteRunnerImageVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TypesGenericSuccessMessage> {
    const response = await this.deleteRunnerImageVersionRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get runner image version details for the id.
   */
  async getRunnerImageVersionRaw(
    requestParameters: GetRunnerImageVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CommonsRunnerImageVersion>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling getRunnerImageVersion().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/runner-image-versions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      CommonsRunnerImageVersionFromJSON(jsonValue)
    )
  }

  /**
   * Get runner image version details for the id.
   */
  async getRunnerImageVersion(
    requestParameters: GetRunnerImageVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CommonsRunnerImageVersion> {
    const response = await this.getRunnerImageVersionRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * List all runner image versions.
   */
  async listRunnerImageVersionsRaw(
    requestParameters: ListRunnerImageVersionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CommonsListRunnerImageVersionsOutput>> {
    if (requestParameters['runner_image_id'] == null) {
      throw new runtime.RequiredError(
        'runner_image_id',
        'Required parameter "runner_image_id" was null or undefined when calling listRunnerImageVersions().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['runner_image_id'] != null) {
      queryParameters['runner_image_id'] = requestParameters['runner_image_id']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/runner-image-versions`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      CommonsListRunnerImageVersionsOutputFromJSON(jsonValue)
    )
  }

  /**
   * List all runner image versions.
   */
  async listRunnerImageVersions(
    requestParameters: ListRunnerImageVersionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CommonsListRunnerImageVersionsOutput> {
    const response = await this.listRunnerImageVersionsRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update runner image version details for the id.
   */
  async updateRunnerImageVersionRaw(
    requestParameters: UpdateRunnerImageVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CommonsRunnerImageVersion>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling updateRunnerImageVersion().'
      )
    }

    if (requestParameters['body'] == null) {
      throw new runtime.RequiredError(
        'body',
        'Required parameter "body" was null or undefined when calling updateRunnerImageVersion().'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/runner-image-versions/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CommonsUpdateRunnerImageVersionInputToJSON(
          requestParameters['body']
        )
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, jsonValue =>
      CommonsRunnerImageVersionFromJSON(jsonValue)
    )
  }

  /**
   * Update runner image version details for the id.
   */
  async updateRunnerImageVersion(
    requestParameters: UpdateRunnerImageVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CommonsRunnerImageVersion> {
    const response = await this.updateRunnerImageVersionRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }
}
