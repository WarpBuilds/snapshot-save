/* tslint:disable */
/* eslint-disable */
/**
 * Warp Builds API Docs
 * This is the docs for warp builds api for argonaut
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonsListRunnerImageVersionsOutput } from '../models';
// @ts-ignore
import type { CommonsRunnerImageVersion } from '../models';
// @ts-ignore
import type { CommonsUpdateRunnerImageVersionInput } from '../models';
// @ts-ignore
import type { TypesGenericSuccessMessage } from '../models';
// @ts-ignore
import type { WarpBuildAPIError } from '../models';
/**
 * V1RunnerImageVersionsApi - axios parameter creator
 * @export
 */
export const V1RunnerImageVersionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete runner image version details for the id.
         * @param {string} id Runner Image Version ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRunnerImageVersion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRunnerImageVersion', 'id', id)
            const localVarPath = `/runner-image-versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get runner image version details for the id.
         * @param {string} id Runner Image Version ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunnerImageVersion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRunnerImageVersion', 'id', id)
            const localVarPath = `/runner-image-versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all runner image versions.
         * @param {string} runnerImageId Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunnerImageVersions: async (runnerImageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runnerImageId' is not null or undefined
            assertParamExists('listRunnerImageVersions', 'runnerImageId', runnerImageId)
            const localVarPath = `/runner-image-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (runnerImageId !== undefined) {
                localVarQueryParameter['runner_image_id'] = runnerImageId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update runner image version details for the id.
         * @param {string} id Runner Image Version ID
         * @param {CommonsUpdateRunnerImageVersionInput} body Runner Image Version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunnerImageVersion: async (id: string, body: CommonsUpdateRunnerImageVersionInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRunnerImageVersion', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateRunnerImageVersion', 'body', body)
            const localVarPath = `/runner-image-versions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1RunnerImageVersionsApi - functional programming interface
 * @export
 */
export const V1RunnerImageVersionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1RunnerImageVersionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete runner image version details for the id.
         * @param {string} id Runner Image Version ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRunnerImageVersion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TypesGenericSuccessMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRunnerImageVersion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImageVersionsApi.deleteRunnerImageVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get runner image version details for the id.
         * @param {string} id Runner Image Version ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunnerImageVersion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImageVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunnerImageVersion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImageVersionsApi.getRunnerImageVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all runner image versions.
         * @param {string} runnerImageId Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRunnerImageVersions(runnerImageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsListRunnerImageVersionsOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRunnerImageVersions(runnerImageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImageVersionsApi.listRunnerImageVersions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update runner image version details for the id.
         * @param {string} id Runner Image Version ID
         * @param {CommonsUpdateRunnerImageVersionInput} body Runner Image Version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRunnerImageVersion(id: string, body: CommonsUpdateRunnerImageVersionInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImageVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRunnerImageVersion(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImageVersionsApi.updateRunnerImageVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V1RunnerImageVersionsApi - factory interface
 * @export
 */
export const V1RunnerImageVersionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1RunnerImageVersionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete runner image version details for the id.
         * @param {V1RunnerImageVersionsApiDeleteRunnerImageVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRunnerImageVersion(requestParameters: V1RunnerImageVersionsApiDeleteRunnerImageVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TypesGenericSuccessMessage> {
            return localVarFp.deleteRunnerImageVersion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get runner image version details for the id.
         * @param {V1RunnerImageVersionsApiGetRunnerImageVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunnerImageVersion(requestParameters: V1RunnerImageVersionsApiGetRunnerImageVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImageVersion> {
            return localVarFp.getRunnerImageVersion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all runner image versions.
         * @param {V1RunnerImageVersionsApiListRunnerImageVersionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunnerImageVersions(requestParameters: V1RunnerImageVersionsApiListRunnerImageVersionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsListRunnerImageVersionsOutput> {
            return localVarFp.listRunnerImageVersions(requestParameters.runnerImageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update runner image version details for the id.
         * @param {V1RunnerImageVersionsApiUpdateRunnerImageVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunnerImageVersion(requestParameters: V1RunnerImageVersionsApiUpdateRunnerImageVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImageVersion> {
            return localVarFp.updateRunnerImageVersion(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteRunnerImageVersion operation in V1RunnerImageVersionsApi.
 * @export
 * @interface V1RunnerImageVersionsApiDeleteRunnerImageVersionRequest
 */
export interface V1RunnerImageVersionsApiDeleteRunnerImageVersionRequest {
    /**
     * Runner Image Version ID
     * @type {string}
     * @memberof V1RunnerImageVersionsApiDeleteRunnerImageVersion
     */
    readonly id: string
}

/**
 * Request parameters for getRunnerImageVersion operation in V1RunnerImageVersionsApi.
 * @export
 * @interface V1RunnerImageVersionsApiGetRunnerImageVersionRequest
 */
export interface V1RunnerImageVersionsApiGetRunnerImageVersionRequest {
    /**
     * Runner Image Version ID
     * @type {string}
     * @memberof V1RunnerImageVersionsApiGetRunnerImageVersion
     */
    readonly id: string
}

/**
 * Request parameters for listRunnerImageVersions operation in V1RunnerImageVersionsApi.
 * @export
 * @interface V1RunnerImageVersionsApiListRunnerImageVersionsRequest
 */
export interface V1RunnerImageVersionsApiListRunnerImageVersionsRequest {
    /**
     * Runner Image ID
     * @type {string}
     * @memberof V1RunnerImageVersionsApiListRunnerImageVersions
     */
    readonly runnerImageId: string
}

/**
 * Request parameters for updateRunnerImageVersion operation in V1RunnerImageVersionsApi.
 * @export
 * @interface V1RunnerImageVersionsApiUpdateRunnerImageVersionRequest
 */
export interface V1RunnerImageVersionsApiUpdateRunnerImageVersionRequest {
    /**
     * Runner Image Version ID
     * @type {string}
     * @memberof V1RunnerImageVersionsApiUpdateRunnerImageVersion
     */
    readonly id: string

    /**
     * Runner Image Version
     * @type {CommonsUpdateRunnerImageVersionInput}
     * @memberof V1RunnerImageVersionsApiUpdateRunnerImageVersion
     */
    readonly body: CommonsUpdateRunnerImageVersionInput
}

/**
 * V1RunnerImageVersionsApi - object-oriented interface
 * @export
 * @class V1RunnerImageVersionsApi
 * @extends {BaseAPI}
 */
export class V1RunnerImageVersionsApi extends BaseAPI {
    /**
     * 
     * @summary Delete runner image version details for the id.
     * @param {V1RunnerImageVersionsApiDeleteRunnerImageVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImageVersionsApi
     */
    public deleteRunnerImageVersion(requestParameters: V1RunnerImageVersionsApiDeleteRunnerImageVersionRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImageVersionsApiFp(this.configuration).deleteRunnerImageVersion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get runner image version details for the id.
     * @param {V1RunnerImageVersionsApiGetRunnerImageVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImageVersionsApi
     */
    public getRunnerImageVersion(requestParameters: V1RunnerImageVersionsApiGetRunnerImageVersionRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImageVersionsApiFp(this.configuration).getRunnerImageVersion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all runner image versions.
     * @param {V1RunnerImageVersionsApiListRunnerImageVersionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImageVersionsApi
     */
    public listRunnerImageVersions(requestParameters: V1RunnerImageVersionsApiListRunnerImageVersionsRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImageVersionsApiFp(this.configuration).listRunnerImageVersions(requestParameters.runnerImageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update runner image version details for the id.
     * @param {V1RunnerImageVersionsApiUpdateRunnerImageVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImageVersionsApi
     */
    public updateRunnerImageVersion(requestParameters: V1RunnerImageVersionsApiUpdateRunnerImageVersionRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImageVersionsApiFp(this.configuration).updateRunnerImageVersion(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

