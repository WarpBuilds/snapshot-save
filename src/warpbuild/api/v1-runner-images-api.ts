/* tslint:disable */
/* eslint-disable */
/**
 * Warp Builds API Docs
 * This is the docs for warp builds api for argonaut
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CommonsCreateRunnerImageInput } from '../models';
// @ts-ignore
import type { CommonsCreateRunnerImagePullSecretInput } from '../models';
// @ts-ignore
import type { CommonsListRunnerImagePullSecretsOutput } from '../models';
// @ts-ignore
import type { CommonsListRunnerImagesOutput } from '../models';
// @ts-ignore
import type { CommonsRunnerImage } from '../models';
// @ts-ignore
import type { CommonsRunnerImagePullSecret } from '../models';
// @ts-ignore
import type { CommonsRunnerImageVersion } from '../models';
// @ts-ignore
import type { CommonsUpdateRunnerImageInput } from '../models';
// @ts-ignore
import type { CommonsUpdateRunnerImagePullSecretInput } from '../models';
// @ts-ignore
import type { TypesGenericSuccessMessage } from '../models';
// @ts-ignore
import type { WarpBuildAPIError } from '../models';
/**
 * V1RunnerImagesApi - axios parameter creator
 * @export
 */
export const V1RunnerImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new runner image.
         * @param {CommonsCreateRunnerImageInput} body Runner Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRunnerImage: async (body: CommonsCreateRunnerImageInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createRunnerImage', 'body', body)
            const localVarPath = `/runner-images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new runner image pull secret.
         * @param {CommonsCreateRunnerImagePullSecretInput} body Runner Image Pull Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRunnerImagePullSecret: async (body: CommonsCreateRunnerImagePullSecretInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createRunnerImagePullSecret', 'body', body)
            const localVarPath = `/runner-image-pull-secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete runner image details for the id.
         * @param {string} id Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRunnerImage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRunnerImage', 'id', id)
            const localVarPath = `/runner-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete runner image pull secret details for the id.
         * @param {string} id Runner Image Pull Secret ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRunnerImagePullSecret: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRunnerImagePullSecret', 'id', id)
            const localVarPath = `/runner-image-pull-secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get latest runner image version details for the id.
         * @param {string} id Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestRunnerImageVersion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLatestRunnerImageVersion', 'id', id)
            const localVarPath = `/runner-images/{id}/latest-version`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get runner image details for the id.
         * @param {string} id Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunnerImage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRunnerImage', 'id', id)
            const localVarPath = `/runner-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get runner image pull secret details for the id.
         * @param {string} id Runner Image Pull Secret ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunnerImagePullSecret: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRunnerImagePullSecret', 'id', id)
            const localVarPath = `/runner-image-pull-secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all runner image pull secrets.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunnerImagePullSecrets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/runner-image-pull-secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all runner images.
         * @param {boolean} [excludeWarpbuildManaged] Exclude Warp build managed images
         * @param {string} [alias] Alias
         * @param {string} [runnerImagePullSecretId] Runner Image Pull Secret ID
         * @param {string} [stackKind] Stack Kind
         * @param {string} [region] Region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunnerImages: async (excludeWarpbuildManaged?: boolean, alias?: string, runnerImagePullSecretId?: string, stackKind?: string, region?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/runner-images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (excludeWarpbuildManaged !== undefined) {
                localVarQueryParameter['exclude_warpbuild_managed'] = excludeWarpbuildManaged;
            }

            if (alias !== undefined) {
                localVarQueryParameter['alias'] = alias;
            }

            if (runnerImagePullSecretId !== undefined) {
                localVarQueryParameter['runner_image_pull_secret_id'] = runnerImagePullSecretId;
            }

            if (stackKind !== undefined) {
                localVarQueryParameter['stack_kind'] = stackKind;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update runner image details for the id.
         * @param {string} id Runner Image ID
         * @param {CommonsUpdateRunnerImageInput} body Runner Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunnerImage: async (id: string, body: CommonsUpdateRunnerImageInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRunnerImage', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateRunnerImage', 'body', body)
            const localVarPath = `/runner-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update runner image pull secret details for the id.
         * @param {string} id Runner Image Pull Secret ID
         * @param {CommonsUpdateRunnerImagePullSecretInput} body Runner Image Pull Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunnerImagePullSecret: async (id: string, body: CommonsUpdateRunnerImagePullSecretInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRunnerImagePullSecret', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateRunnerImagePullSecret', 'body', body)
            const localVarPath = `/runner-image-pull-secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1RunnerImagesApi - functional programming interface
 * @export
 */
export const V1RunnerImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1RunnerImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new runner image.
         * @param {CommonsCreateRunnerImageInput} body Runner Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRunnerImage(body: CommonsCreateRunnerImageInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRunnerImage(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.createRunnerImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new runner image pull secret.
         * @param {CommonsCreateRunnerImagePullSecretInput} body Runner Image Pull Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRunnerImagePullSecret(body: CommonsCreateRunnerImagePullSecretInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImagePullSecret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRunnerImagePullSecret(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.createRunnerImagePullSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete runner image details for the id.
         * @param {string} id Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRunnerImage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRunnerImage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.deleteRunnerImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete runner image pull secret details for the id.
         * @param {string} id Runner Image Pull Secret ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRunnerImagePullSecret(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TypesGenericSuccessMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRunnerImagePullSecret(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.deleteRunnerImagePullSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get latest runner image version details for the id.
         * @param {string} id Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestRunnerImageVersion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImageVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestRunnerImageVersion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.getLatestRunnerImageVersion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get runner image details for the id.
         * @param {string} id Runner Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunnerImage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunnerImage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.getRunnerImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get runner image pull secret details for the id.
         * @param {string} id Runner Image Pull Secret ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunnerImagePullSecret(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImagePullSecret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunnerImagePullSecret(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.getRunnerImagePullSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all runner image pull secrets.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRunnerImagePullSecrets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsListRunnerImagePullSecretsOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRunnerImagePullSecrets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.listRunnerImagePullSecrets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all runner images.
         * @param {boolean} [excludeWarpbuildManaged] Exclude Warp build managed images
         * @param {string} [alias] Alias
         * @param {string} [runnerImagePullSecretId] Runner Image Pull Secret ID
         * @param {string} [stackKind] Stack Kind
         * @param {string} [region] Region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRunnerImages(excludeWarpbuildManaged?: boolean, alias?: string, runnerImagePullSecretId?: string, stackKind?: string, region?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsListRunnerImagesOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRunnerImages(excludeWarpbuildManaged, alias, runnerImagePullSecretId, stackKind, region, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.listRunnerImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update runner image details for the id.
         * @param {string} id Runner Image ID
         * @param {CommonsUpdateRunnerImageInput} body Runner Image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRunnerImage(id: string, body: CommonsUpdateRunnerImageInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRunnerImage(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.updateRunnerImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update runner image pull secret details for the id.
         * @param {string} id Runner Image Pull Secret ID
         * @param {CommonsUpdateRunnerImagePullSecretInput} body Runner Image Pull Secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRunnerImagePullSecret(id: string, body: CommonsUpdateRunnerImagePullSecretInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonsRunnerImagePullSecret>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRunnerImagePullSecret(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['V1RunnerImagesApi.updateRunnerImagePullSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * V1RunnerImagesApi - factory interface
 * @export
 */
export const V1RunnerImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1RunnerImagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new runner image.
         * @param {V1RunnerImagesApiCreateRunnerImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRunnerImage(requestParameters: V1RunnerImagesApiCreateRunnerImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImage> {
            return localVarFp.createRunnerImage(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new runner image pull secret.
         * @param {V1RunnerImagesApiCreateRunnerImagePullSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRunnerImagePullSecret(requestParameters: V1RunnerImagesApiCreateRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImagePullSecret> {
            return localVarFp.createRunnerImagePullSecret(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete runner image details for the id.
         * @param {V1RunnerImagesApiDeleteRunnerImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRunnerImage(requestParameters: V1RunnerImagesApiDeleteRunnerImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImage> {
            return localVarFp.deleteRunnerImage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete runner image pull secret details for the id.
         * @param {V1RunnerImagesApiDeleteRunnerImagePullSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRunnerImagePullSecret(requestParameters: V1RunnerImagesApiDeleteRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig): AxiosPromise<TypesGenericSuccessMessage> {
            return localVarFp.deleteRunnerImagePullSecret(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get latest runner image version details for the id.
         * @param {V1RunnerImagesApiGetLatestRunnerImageVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestRunnerImageVersion(requestParameters: V1RunnerImagesApiGetLatestRunnerImageVersionRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImageVersion> {
            return localVarFp.getLatestRunnerImageVersion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get runner image details for the id.
         * @param {V1RunnerImagesApiGetRunnerImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunnerImage(requestParameters: V1RunnerImagesApiGetRunnerImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImage> {
            return localVarFp.getRunnerImage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get runner image pull secret details for the id.
         * @param {V1RunnerImagesApiGetRunnerImagePullSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunnerImagePullSecret(requestParameters: V1RunnerImagesApiGetRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImagePullSecret> {
            return localVarFp.getRunnerImagePullSecret(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all runner image pull secrets.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunnerImagePullSecrets(options?: RawAxiosRequestConfig): AxiosPromise<CommonsListRunnerImagePullSecretsOutput> {
            return localVarFp.listRunnerImagePullSecrets(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all runner images.
         * @param {V1RunnerImagesApiListRunnerImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRunnerImages(requestParameters: V1RunnerImagesApiListRunnerImagesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CommonsListRunnerImagesOutput> {
            return localVarFp.listRunnerImages(requestParameters.excludeWarpbuildManaged, requestParameters.alias, requestParameters.runnerImagePullSecretId, requestParameters.stackKind, requestParameters.region, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update runner image details for the id.
         * @param {V1RunnerImagesApiUpdateRunnerImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunnerImage(requestParameters: V1RunnerImagesApiUpdateRunnerImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImage> {
            return localVarFp.updateRunnerImage(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update runner image pull secret details for the id.
         * @param {V1RunnerImagesApiUpdateRunnerImagePullSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunnerImagePullSecret(requestParameters: V1RunnerImagesApiUpdateRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommonsRunnerImagePullSecret> {
            return localVarFp.updateRunnerImagePullSecret(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRunnerImage operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiCreateRunnerImageRequest
 */
export interface V1RunnerImagesApiCreateRunnerImageRequest {
    /**
     * Runner Image
     * @type {CommonsCreateRunnerImageInput}
     * @memberof V1RunnerImagesApiCreateRunnerImage
     */
    readonly body: CommonsCreateRunnerImageInput
}

/**
 * Request parameters for createRunnerImagePullSecret operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiCreateRunnerImagePullSecretRequest
 */
export interface V1RunnerImagesApiCreateRunnerImagePullSecretRequest {
    /**
     * Runner Image Pull Secret
     * @type {CommonsCreateRunnerImagePullSecretInput}
     * @memberof V1RunnerImagesApiCreateRunnerImagePullSecret
     */
    readonly body: CommonsCreateRunnerImagePullSecretInput
}

/**
 * Request parameters for deleteRunnerImage operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiDeleteRunnerImageRequest
 */
export interface V1RunnerImagesApiDeleteRunnerImageRequest {
    /**
     * Runner Image ID
     * @type {string}
     * @memberof V1RunnerImagesApiDeleteRunnerImage
     */
    readonly id: string
}

/**
 * Request parameters for deleteRunnerImagePullSecret operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiDeleteRunnerImagePullSecretRequest
 */
export interface V1RunnerImagesApiDeleteRunnerImagePullSecretRequest {
    /**
     * Runner Image Pull Secret ID
     * @type {string}
     * @memberof V1RunnerImagesApiDeleteRunnerImagePullSecret
     */
    readonly id: string
}

/**
 * Request parameters for getLatestRunnerImageVersion operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiGetLatestRunnerImageVersionRequest
 */
export interface V1RunnerImagesApiGetLatestRunnerImageVersionRequest {
    /**
     * Runner Image ID
     * @type {string}
     * @memberof V1RunnerImagesApiGetLatestRunnerImageVersion
     */
    readonly id: string
}

/**
 * Request parameters for getRunnerImage operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiGetRunnerImageRequest
 */
export interface V1RunnerImagesApiGetRunnerImageRequest {
    /**
     * Runner Image ID
     * @type {string}
     * @memberof V1RunnerImagesApiGetRunnerImage
     */
    readonly id: string
}

/**
 * Request parameters for getRunnerImagePullSecret operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiGetRunnerImagePullSecretRequest
 */
export interface V1RunnerImagesApiGetRunnerImagePullSecretRequest {
    /**
     * Runner Image Pull Secret ID
     * @type {string}
     * @memberof V1RunnerImagesApiGetRunnerImagePullSecret
     */
    readonly id: string
}

/**
 * Request parameters for listRunnerImages operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiListRunnerImagesRequest
 */
export interface V1RunnerImagesApiListRunnerImagesRequest {
    /**
     * Exclude Warp build managed images
     * @type {boolean}
     * @memberof V1RunnerImagesApiListRunnerImages
     */
    readonly excludeWarpbuildManaged?: boolean

    /**
     * Alias
     * @type {string}
     * @memberof V1RunnerImagesApiListRunnerImages
     */
    readonly alias?: string

    /**
     * Runner Image Pull Secret ID
     * @type {string}
     * @memberof V1RunnerImagesApiListRunnerImages
     */
    readonly runnerImagePullSecretId?: string

    /**
     * Stack Kind
     * @type {string}
     * @memberof V1RunnerImagesApiListRunnerImages
     */
    readonly stackKind?: string

    /**
     * Region
     * @type {string}
     * @memberof V1RunnerImagesApiListRunnerImages
     */
    readonly region?: string
}

/**
 * Request parameters for updateRunnerImage operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiUpdateRunnerImageRequest
 */
export interface V1RunnerImagesApiUpdateRunnerImageRequest {
    /**
     * Runner Image ID
     * @type {string}
     * @memberof V1RunnerImagesApiUpdateRunnerImage
     */
    readonly id: string

    /**
     * Runner Image
     * @type {CommonsUpdateRunnerImageInput}
     * @memberof V1RunnerImagesApiUpdateRunnerImage
     */
    readonly body: CommonsUpdateRunnerImageInput
}

/**
 * Request parameters for updateRunnerImagePullSecret operation in V1RunnerImagesApi.
 * @export
 * @interface V1RunnerImagesApiUpdateRunnerImagePullSecretRequest
 */
export interface V1RunnerImagesApiUpdateRunnerImagePullSecretRequest {
    /**
     * Runner Image Pull Secret ID
     * @type {string}
     * @memberof V1RunnerImagesApiUpdateRunnerImagePullSecret
     */
    readonly id: string

    /**
     * Runner Image Pull Secret
     * @type {CommonsUpdateRunnerImagePullSecretInput}
     * @memberof V1RunnerImagesApiUpdateRunnerImagePullSecret
     */
    readonly body: CommonsUpdateRunnerImagePullSecretInput
}

/**
 * V1RunnerImagesApi - object-oriented interface
 * @export
 * @class V1RunnerImagesApi
 * @extends {BaseAPI}
 */
export class V1RunnerImagesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new runner image.
     * @param {V1RunnerImagesApiCreateRunnerImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public createRunnerImage(requestParameters: V1RunnerImagesApiCreateRunnerImageRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).createRunnerImage(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new runner image pull secret.
     * @param {V1RunnerImagesApiCreateRunnerImagePullSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public createRunnerImagePullSecret(requestParameters: V1RunnerImagesApiCreateRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).createRunnerImagePullSecret(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete runner image details for the id.
     * @param {V1RunnerImagesApiDeleteRunnerImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public deleteRunnerImage(requestParameters: V1RunnerImagesApiDeleteRunnerImageRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).deleteRunnerImage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete runner image pull secret details for the id.
     * @param {V1RunnerImagesApiDeleteRunnerImagePullSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public deleteRunnerImagePullSecret(requestParameters: V1RunnerImagesApiDeleteRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).deleteRunnerImagePullSecret(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get latest runner image version details for the id.
     * @param {V1RunnerImagesApiGetLatestRunnerImageVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public getLatestRunnerImageVersion(requestParameters: V1RunnerImagesApiGetLatestRunnerImageVersionRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).getLatestRunnerImageVersion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get runner image details for the id.
     * @param {V1RunnerImagesApiGetRunnerImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public getRunnerImage(requestParameters: V1RunnerImagesApiGetRunnerImageRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).getRunnerImage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get runner image pull secret details for the id.
     * @param {V1RunnerImagesApiGetRunnerImagePullSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public getRunnerImagePullSecret(requestParameters: V1RunnerImagesApiGetRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).getRunnerImagePullSecret(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all runner image pull secrets.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public listRunnerImagePullSecrets(options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).listRunnerImagePullSecrets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all runner images.
     * @param {V1RunnerImagesApiListRunnerImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public listRunnerImages(requestParameters: V1RunnerImagesApiListRunnerImagesRequest = {}, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).listRunnerImages(requestParameters.excludeWarpbuildManaged, requestParameters.alias, requestParameters.runnerImagePullSecretId, requestParameters.stackKind, requestParameters.region, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update runner image details for the id.
     * @param {V1RunnerImagesApiUpdateRunnerImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public updateRunnerImage(requestParameters: V1RunnerImagesApiUpdateRunnerImageRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).updateRunnerImage(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update runner image pull secret details for the id.
     * @param {V1RunnerImagesApiUpdateRunnerImagePullSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1RunnerImagesApi
     */
    public updateRunnerImagePullSecret(requestParameters: V1RunnerImagesApiUpdateRunnerImagePullSecretRequest, options?: RawAxiosRequestConfig) {
        return V1RunnerImagesApiFp(this.configuration).updateRunnerImagePullSecret(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

